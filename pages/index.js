import Head from 'next/head';
import axios from 'axios';
import { useEffect } from 'react';
import { useState } from 'react';
import { BsSearch } from 'react-icons/bs';
import { getWeatherIcon } from './weatherIcon.js';

export default function Home() {
  const [city, setCity] = useState('');
  const [weather, setWeather] = useState({});
  const [loading, setLoading] = useState(false);
  const [tempInCelsius, setTempInCelsius] = useState('');
  const [buttonClicked, setButtonClicked] = useState(false);
  const [localTime, setLocalTime] = useState('');
  const [error, setError] = useState(null);

  const currentWeatherCondition = weather.weather ? weather.weather[0].main : '';

 
  useEffect(() => {
    const timer = setInterval(() => {
      if (weather.timezone) {
        const date = new Date(); // Aktuelle Datum und Uhrzeit
        const timezoneOffsetInSeconds = date.getTimezoneOffset() * 60; // Zeitzone der Stadt in Sekunden von UTC
        const localTime = new Date(date.getTime() + (weather.timezone + timezoneOffsetInSeconds) * 1000); // Lokale Uhrzeit der Stadt
        setLocalTime(localTime.toLocaleTimeString()); // Setzen Sie den Zustand auf die lokale Uhrzeit der Stadt
      }
    }, 1000); // Aktualisiert jede Sekunde
    // Aufr채umen, wenn die Komponente unmountet
    return () => clearInterval(timer);
  }, [weather.timezone]); // Abh채ngigkeiten: Aktualisiert, wenn sich die Zeitzone 채ndert

// abrufen der wetterdaten
  const fetchWeather = (e) => {
    e.preventDefault();
    setLoading(true);
    setButtonClicked(true);
    const MY_WEATHER_API_KEY = process.env.NEXT_PUBLIC_WEATHER_API_KEY;
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${MY_WEATHER_API_KEY}`;

    axios
      .get(apiUrl)
      .then((response) => {
        setWeather(response.data);
        const weatherData = response.data;
        const tempCelsius = (weatherData.main.temp - 273.15).toFixed(2);
        setTempInCelsius(tempCelsius);
        setError(''); // Kein Fehler, also setzen wir den Fehlerzustand auf einen leeren String
      })
      .catch((error) => {
        setError('Error! City not found!'); // Setzen Sie den Fehlerzustand auf die Fehlermeldung
        alert('Error! City not found! Please enter a valid city name'); // Zeigt die Fehlermeldung in einem Popup-Fenster an
      })
      .finally(() => {
        setLoading(false);
      });
  };

// Webseite
  return (
    <div className="container">
  <Head>
    <title>WeatherScope</title>
    <meta name="description" content="Generated by create next app" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/icon.jpg" type="image/jpeg"/>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet"></link>
  </Head>
  {!buttonClicked && (
  <div className="header">
    <h1>WeatherScope</h1>
  </div>
  )}
  <div className='header icon'>
  {getWeatherIcon(currentWeatherCondition)}
  </div>
  <div>
    <form onSubmit={fetchWeather}>
      <input
        type="text"
        placeholder="enter name of city"
        value={city}
        onChange={(e) => setCity(e.target.value)}
      />
      <button type="submit">
        <BsSearch/>
      </button>
    </form>
  </div>
  {loading && <p className="loading">Loading...</p>}
  {weather.main && (
    <div className="weatherInfo">
      <h2>Weather in <span style={{ color: 'rgb(144, 86, 191)' }}>{weather.name}, {weather.sys.country}</span></h2>
      <p>temperature: <span style={{ color: 'rgb(144, 86, 191)' }}>{tempInCelsius}째C</span></p>
      <p>humidity: <span style={{ color: 'rgb(144, 86, 191)' }}>{weather.main.humidity}%</span></p>
      <p>cloud formation: <span style={{ color: 'rgb(144, 86, 191)' }}>{weather.weather[0].description}</span></p>
      <p>local time: <span style={{ color: 'rgb(144, 86, 191)' }}>{localTime}</span></p>
    </div>
  )}
</div>
  );
}